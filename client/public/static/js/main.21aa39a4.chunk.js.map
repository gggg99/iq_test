{"version":3,"sources":["components/Questions.js","components/Main.js","index.js"],"names":["useStyles","makeStyles","theme","media","height","media_option","media_option_wrapper","textAlign","marginBottom","media_wrapper","images_container","width","paddingBottom","images_wrapper","display","justifyContent","flexDirection","alignItems","image_wrapper","radio_group","paddingTop","form_control","button_wrapper","Questions","questions","setOrderResult","orderResult","useState","answers","setAnswers","handleChange","event","updatedAnswers","target","name","value","sendResults","a","Object","keys","length","axios","post","result","data","classes","className","map","question","src","option","FormControl","component","FormLabel","RadioGroup","onChange","FormControlLabel","control","Radio","label","Divider","Button","variant","color","onClick","Dashboard","setQuestions","email","setEmail","payment_checkout_wrapper","payment_checkout_text","email_input","useEffect","get","getQuestions","console","log","LMI_PAYMENT_NO","Container","maxWidth","Grid","container","item","xs","Typography","TextField","error","id","helperText","defaultValue","e","method","action","onSubmit","preventDefault","type","LMI_PAYMENT_AMOUNT","LMI_PAYMENT_DESC","ORDER_ID","LMI_PAYEE_PURSE","LMI_SIM_MODE","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21aa39a4.chunk.js","sourcesContent":["import {Divider, Button, FormControl, RadioGroup, FormControlLabel, FormLabel, Radio} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {React, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    media: {\r\n      height: \"450px\",\r\n    },\r\n    media_option: {\r\n        height: \"90px\",\r\n    },\r\n    media_option_wrapper: {\r\n        textAlign: \"center\",\r\n        marginBottom: \"30px\"\r\n    },\r\n    media_wrapper: {\r\n        textAlign: \"center\",\r\n        marginBottom: \"30px\"\r\n    },\r\n    images_container:{\r\n      width: \"850px\",\r\n      paddingBottom: \"10px\"\r\n    },\r\n    images_wrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        textAlign: \"center\"\r\n    },\r\n    image_wrapper: {\r\n        marginBottom: \"90px\"\r\n    },\r\n    radio_group: {\r\n        flexDirection: \"row\",\r\n        paddingTop: \"40px\",\r\n        paddingBottom: \"60px\"\r\n    },\r\n    form_control: {\r\n        paddingTop: \"20px\"\r\n    },\r\n    button_wrapper: {\r\n        paddingBottom: \"40px\"\r\n    }\r\n  }));\r\n\r\nconst Questions = ({questions, orderResult, setOrderResult}) => {\r\n\r\n    const [answers, setAnswers] = useState({});\r\n    \r\n    const handleChange = (event) => {\r\n        const updatedAnswers = {...answers, [event.target.name]: event.target.value };\r\n        setAnswers(updatedAnswers);\r\n    };\r\n\r\n    const sendResults = async () => {\r\n        if (Object.keys(answers).length == 11){\r\n            const result = await axios.post('http://localhost:80/order/create', answers);\r\n            setOrderResult(result.data);\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return <div className={classes.images_wrapper}>\r\n     { questions && questions.map((question) => (\r\n        <div className={classes.image_wrapper}>\r\n            <div className={classes.media_option_wrapper}><img src={`${question.question}`} className={classes.media}/></div>\r\n            <div className={classes.media_wrapper}><img src={`${question.option}`} className={classes.media_option}/></div>\r\n            <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Номер картинки (отсчет слева направо)</FormLabel>\r\n                <RadioGroup aria-label=\"question\" className={classes.radio_group} name={`${question.name}`} value={answers[question.name] ? answers[question.name] : 1} onChange={handleChange}>\r\n                    <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" />\r\n                    <FormControlLabel value=\"2\" control={<Radio />} label=\"2\" />\r\n                    <FormControlLabel value=\"3\" control={<Radio />} label=\"3\" />\r\n                    <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" />\r\n                    <FormControlLabel value=\"5\" control={<Radio />} label=\"5\" />\r\n                </RadioGroup>\r\n            </FormControl>\r\n            <Divider/>\r\n        </div>\r\n       ))\r\n    }\r\n    {Object.keys(answers).length == 11 && (\r\n        <div className={classes.button_wrapper}>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={() => sendResults()}>\r\n                Узнать результат\r\n            </Button>\r\n        </div>\r\n    )}\r\n    </div>\r\n}\r\n\r\nexport default Questions;","import React, {useEffect, useState} from 'react';\r\nimport {Button, Grid, Container, Typography} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport Questions from './Questions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst Dashboard = () => {\r\n\r\n    const [questions, setQuestions] = useState();\r\n    const [orderResult, setOrderResult] = useState(false);\r\n    const [email, setEmail] = useState();\r\n    \r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        payment_checkout_wrapper: {\r\n            paddingTop: \"30px\",\r\n            textAlign: \"center\"\r\n        },\r\n        payment_checkout_text: {\r\n            marginBottom: \"20px\",\r\n            textAlign: \"left\"\r\n        },\r\n        email_input: {\r\n            marginBottom: \"20px\"\r\n        }\r\n    }))\r\n\r\n    useEffect(() => {\r\n        const getQuestions = async () => {\r\n            const questions = await axios.get('http://localhost:80/questions');\r\n            if (questions) setQuestions(questions.data);\r\n        }\r\n        getQuestions();\r\n    },[])\r\n\r\n    const paymentHandler = (e) => {\r\n        if (!email){\r\n            setEmail(false);\r\n            e.preventDefault();   \r\n        }\r\n    }   \r\n\r\n    const classes = useStyles();\r\n\r\n    console.log(orderResult.LMI_PAYMENT_NO);\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Grid container>\r\n                <Grid item xs={12} justifyContent={\"center\"}>\r\n                    {!orderResult && <Questions \r\n                        questions={questions} \r\n                        orderResult={orderResult} \r\n                        setOrderResult={setOrderResult}\r\n                    />}\r\n                    {orderResult && (\r\n                        <div className={classes.payment_checkout_wrapper}>\r\n                            <Typography variant=\"body3\" component=\"p\" className={classes.payment_checkout_text}>\r\n                                Тест в своем роде уникален, и составлялся нами лично, поэтому для того чтобы узнать результат, \r\n                                оплатите символическую сумму в 50 рублей. Результат вы сможете увидеть сразу\r\n                                после оплаты, либо укажите электронную почту, на которую придет ответ. В случае\r\n                                какой-то проблемы пишите на почту:  \r\n                            </Typography>\r\n                            <TextField \r\n                                error={email == false ? true : false} \r\n                                id=\"standard-read-only-input\" \r\n                                label={`${email == false ? 'Введите E-mail' : 'E-mail'}`} \r\n                                helperText={email == false ? 'Без ввода почты, в случае ошибки мы не узнаем куда вам отправить результат' : 'На эту почту придет письмо с результатами ответов'} \r\n                                defaultValue=\"\" \r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                className={classes.email_input}\r\n                            />\r\n                            <form method=\"POST\" action=\"https://merchant.webmoney.ru/lmi/payment.asp?at=authtype_16\" onSubmit={paymentHandler}>  \r\n                                <input type=\"hidden\" name=\"LMI_PAYMENT_AMOUNT\" value={orderResult.LMI_PAYMENT_AMOUNT}/>\r\n                                <input type=\"hidden\" name=\"LMI_PAYMENT_DESC\" value={orderResult.LMI_PAYMENT_DESC}/>\r\n                                <input type=\"hidden\" name=\"ORDER_ID\" value={orderResult.ORDER_ID}/>\r\n                                <input type=\"hidden\" name=\"EMAIL\" value={email}/>\r\n                                <input type=\"hidden\" name=\"LMI_PAYEE_PURSE\" value={orderResult.LMI_PAYEE_PURSE}/>\r\n                                <input type=\"hidden\" name=\"LMI_SIM_MODE\" value={orderResult.LMI_SIM_MODE}/>\r\n                                <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\r\n                                    Узнать результат\r\n                                </Button>\r\n                            </form>\r\n                        </div>\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard from './components/Main'\n\nReactDOM.render(\n    <Dashboard />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}